#title Welcome
* 13年11月9日 周六 10:44

** 生活中的值得与不值得

时间轴往前移个 20 年，当年要是谁家有台老任的红白机，绝对让小伙伴们眼馋，
谁不想玩上几把，作业神马的都忘在脑后，要是遇上放暑假，那些作业往往都压在
最后完成，打机才是我们最期待的事情。

时光回到现在，被眼红的，变成了身家、豪宅、跑车、美女无疑，若还能像明星般
在人群中闪耀，拥有上天赐予的容貌与身材，更是难求。

如今各种媒体宣传、展示，人们最想要的，是以上那些值得炫耀、吸引眼球的生活，
在主流的话语圈中，生活要如此配置，才算是值得过。

而为了过上值得过的生活，所有通往这个配置的努力，才算是实实在在的拼博。

为了更快到达这个阶段，我们未出生就已经开始了赛跑，先是曾祖这一辈的赛跑、
接着是祖父这一辈的、然后是父母辈，到我们出生，尽各自所能上好的托儿所、幼
儿园、小学、中学、高中，拿各种国内奖、国外奖，甚至跳级、进少年班，然后留
学去国外上更好的大学，披更多地光环，毕业后去明星公司、或是继承父辈的基业，
年少有为，这是基础配置。

而大部分的人未出生开始做预备动作，父母辈就已经落后别人家几条街了。

我以前觉得应试教育的结果，是各式各样，各有所长的学生，被量化到了一把尺子
里，就这样被不断纠正量化十几年，因为只有一个目标：分数，所以量化的尺度显
然是唯一的。

而这个在各路媒体宣传打造下的平庸社会，把生活弄成了各种配置，极力宣扬高配
的生活才是人们所应该追求的。让我离开学校好几年，又突然有了一种被量化的感
觉，我们全身上下，眼镜、手机、手表、衣服、裤子、鞋子，电视、家具、住宅都
被分成了各种等级，量化到各种配置里。

然后还是同一把尺子的标准下，极力宣传，唤起人们内心脆弱的渴望，目标只是过
上值得过的生活。

所有人的渴望，就不是自己的渴望了，那大部分是其他人很分散、单独的渴望，他
人心目中值得与不值得的判断标准。

可是，明明就有很多东西是无法被量化的，自然就很难以大众的眼光来评判说值得
与不值得。

比如，前几天看到的，一个报社副编辑辞职，举报当地的一个领导，怕被报复，出
门都头戴钢盔，手持防卫棍棒，住所还安了望远镜。

比如，如今好多大城市工作、生活压力大的年轻人辞职去西藏旅行，豁达身心。

比如，深圳这边的义工，他们牺牲自己的业余时间来做很多对市民很有帮助的活动。

这些无法被量化的事情，却占据了他们生活中的很大一部分，其实我还可以举上很
多很多的例子。更为显然的是假若你现在所从事、所追求的东西，当前的世界上并
不存在，也就无法量化为值得与不值得，就算结果可以描绘得很美好，但是否真的
可以，都是未知的。

所以值得与不值得，变成了到底是忠于自己，还是忠于主流媒体的宣传、大众、别
人的眼光、他人评判的事情。

如果只是忠于自己，那显然是很私人的事情，这里的私人，并不是指这件事不可以
拿出来说，而是指即便将其拿出来摊开说，他人也难以做到完全理解、评判其中的
价值，因为有些事情，就是仅仅对于自己才有特殊的意义。

这样说来，每个人的生活对于自己的全部价值，无法以众人的眼光进行评判，而所
谓主流的眼光，评判的值得与不值得，那是集千千万万个客体的眼光，他们都有自
己很特殊很渴望的一面，并不是每一个自己所有的渴望，区分自己内心的渴望与他
人的渴望，这个度得把握好。

*** [[CategoryLife][CategoryLife]] / [[2013-11#p2][Permalink]] 

<!-- date: 2013-11-09T10:44:10+0800 -->

* 13年11月7日 周四 19:11

** 新入 Noppoo Choc Mini 84

前天心血来潮，觉得原来的 104 键盘太大了，右手边的小键盘区老是阻碍到鼠标
的发挥，而小键盘区实际上使用率很低，然后就觉得很奇怪，为啥厂家们都不把
104 键盘的小键盘区放在左边呢，这样右手鼠标多自由，然后使用频率低得小键盘
区左手操作还能锻炼右脑有木有。

然后就想到要不买一款小键盘吧，然后就开始找，不知怎么就找到了这款 Noppoo
Choc Mini 84，笔记本键盘布局很不错的样子，不过当时就搜到了说不支持 Mac，
但后来又找到可以装第三方自由开发者弄的野路子驱动，可以比较完美地支持。

因为是机械键盘，还不便宜，我还上 amazon 搜了薄膜键盘，奇怪的是便宜的薄膜
键盘，笔记本或者更小布局的，都只有超薄型号的，我是平常在家使用，超薄的太
轻，感觉无法接受。

好吧，机械键盘我也认了。其实后来还找到了 pocker II，以及网上吹得很厉害的
HKKB，pocker 也是机械键盘，外观更讨喜，但 61 键的布局我觉得是偏小了，
F1 ~ F12、以及 Pgup、Pgdn 等对我来说还是蛮重要的，偶尔看长网页或者大段代
码的时候，我也懒得在 emacs 里面使用组合按键，而直接就是用这些键了。

HKKB 也是按键偏小，而且静电电容键盘价格又高，大概 2k 以上，远超我的预算
了，虽然实际上我一般也没啥预算的样子。

然后到选机械键盘的轴，虽然都是 cherry 的轴，但还有青轴、茶轴、黑轴、红轴
等等的区别，这里不说了，我还跑到 youku 上面听了一把，其实这些虽然都是使
用 cherry 的轴，不同品牌声音还有差别，除此以外，当然还有其他的原因，后面
再说。

话说黑轴的声音以及键程很短，按键需要的力量也大，直上直下，不大适合平时打
字，这些都是传说，但是出货量大，taobao 这个款的便宜，mini 84 卖的店家不多，
青轴、茶轴的更少，没啥选的，后面找到了一家还不便宜，选了青轴，反正青轴茶
轴我也分不出来，不过后来觉得青轴的声音还是有点大，不晓得茶轴的声音如何。

然后今天中午货到家了，看起来还不错，但是遇到了几个现实的问题，一是之前就
预料到的 mac 下的驱动问题，还好解决了，直接装了 github 上一个相关项目的驱
动，然后还要装个 <nop>KeyMap4MacBook</nop> 才行，要不然 emacs 里面 meta
按键还不能用，对了，我习惯 pc 下的 alt 做 option、win 做 command，emacs
下面 alt 不变。

驱动的问题解决，然后是上面有提到的声音问题，机械键盘很重，底盘也重，键程
又长，也许是我之前的薄膜键盘需要很大力气按吧，在我的木桌子上，声音好大呀，
我仔细分辨，有底座敲击桌面的声音，因为是木桌子，有点年月了，也许是桌面比
较脆吧，于是就想着垫个鼠标垫上去，声音其实还是有，非得垫个毛巾之类的，还
要叠上几层，那个底座敲击桌面的声音才听不到，不过这样子，纯粹青轴的声音也
不小，好蛋疼。

然后还有，机械键盘的按键好高，底盘也高，一开始好不适应，要比我之前那个薄
膜键盘高出来大概有 1 个多厘米，如果我要获得与之前薄膜键盘一样的手臂压住桌
面的感觉，就还得买一个掌托，我真是自找苦吃啊。

好吧，先折腾一段时间，大概一个月再看看，有没有哭不出来的感觉。

*** [[CategoryLife][CategoryLife]] / [[2013-11#p1][Permalink]] 

<!-- date: 2013-11-07T19:11:43+0800 -->

* 13年11月2日 周六 23:19

** Bash 下统计文件行数

直接列代码了，用的 pattern 是 find 命令的。

<src type="sh">
linesInFilePattern() {
        sum=0
        for file in $(find . -name "$1"); do
                line=`wc -l $file`
                cur=`echo $line | cut -d' ' -f1`
                sum=$(($sum + $cur))
        done
        echo total is $sum
}
</src>

*** [[CategoryProgramming][CategoryProgramming]] / [[2013-11#p0][Permalink]] 

<!-- date: 2013-11-02T23:19:01+0800 -->

* 13年10月27日 周日 10:13

** 有关错误

我犯过很多错误，有大有小，小错连回顾的想法都没有就过了，大错是会努力记住，
想不再犯，不过也指不定哪天就忘了。小时候还坚信觉得人若聪明，犯过的错误就
不会再犯。

后来懂得了，人只不过一个生物，虽然进化了多少万年，但很多方面与地球上其他
的生物无二样，若用极有逻辑的思维去推敲，人大部分的时候都蠢到极点。

也不能怪自己，与其他的生物一样，我们生来并非自己选择，身上的基因却生来就
有缺陷，身为半成品却想走完美路线，这件事一开始就错了。

扯了那么多，可严格来说，到底什么是错误，总感觉很难定论。有公理、定理、逻
辑推论的系统，要证明错误总是有方法的，可那是严格定义的世界，那个世界有很
明确的边界，很明确的符号，很明确的行为，很明确的对象关系。

可在日常的生活中呢，所有的一切都混杂在一起，哪里有什么公理，明明就是公说
公有理、婆说婆有理，非要用色彩来比喻，这是灰色的世界。

所以嘛，他人眼中的错误，也许偏偏就是你的心头好，反过来呢，也一样。

但是偏偏有些事情再复杂，也得分出边界来，要不然，我是你？你是我？你的是我
的？我的还是我的？

所以就有了大家自认为的伦理，那确实是一堆人非要在一起组成个复杂的群体才会
有的东西，我想我们的对错之分，应该就在这个伦理的系统里。

可是这么模糊的边界、这么难以捉摸的定义，总感觉就像在雾霾天里，大家都看得
到彼此，大家都看不清楚彼此，大家都不大想让别人看太清自己，而大家实际上也
不大可能看太清楚彼此，如今大家可是乐不乐意都生活在这样的环境里。

如果还是硬要用色彩来比喻，我觉得是灰度为 55&#37; 的世界。

身为半成品，我对自己还有很不满意的地方，比如思考能力有限。就算给我一个很
明确的世界，我也得推理半天才能得到对错的结论。就别说丢给我一块地图了，各
种语言混杂，各种符号标识乱注，有的地方信息少得可怜，有的地方却信息太多过
滤不来，我才思考完一段旅程，说不定就风烛残年了，还怀抱理想着走出这个灰色
的世界？

我看我还是丢掉完美路线的思维定势，有限的时间做出决定就好了，对错之分等等
就交给这个复杂的系统，坦诚面对吧。

*** [[CategoryLife][CategoryLife]] / [[2013-10#p1][Permalink]] 

<!-- date: 2013-10-27T10:13:53+0800 -->

* 13年10月10日 周四 18:08

** 搭建 git 认证服务端、wiki知识系统

终于进入到多人开发游戏的情况，源代码的版本控制变得必要了，毫无疑问使用
git，为此我还查找了 diff 和 apply 的使用，git 有自己的一套东西，但这些确
实不算方便，可以说是穷人间低频度交流开发的工具，如果是高频度地交流，统一
的服务器变得必要。

之前我已经租了一个阿里云服务器，用来放我们的游戏服务端，目前还在开发早期，
在上面搭建一个 git 服务端再好不过。用的是 gitosis，网上配置文章一大把，使
用下来，确实不错。

今天又搭建了一个 wiki，用的是 dokuwiki，看中的是没有 db，且我们的文档也不
会很多，简单的足够了。后面大家的文档交流不需要通过邮箱了，到时版本也复杂，
直接通过网页文档交流多好。

可以将搭建开发环境、工具使用，系统设计、开发约定的一些东西放上去，以后就
不需要一遍又一遍地发邮件确认了。

对，其实我们还需要一个任务列表，东西、想法比较多的时候，就该权衡哪些东西
该留、哪些东西该丢掉了，然后就看看需要那些资源，补充进来，跟进度，确认质
量，流程应该没错吧。

*** [[CategoryProgramming][CategoryProgramming]] / [[2013-10#p0][Permalink]] 

<!-- date: 2013-10-10T18:08:10+0800 -->

* 13年9月29日 周日 18:45

** Bash 下对比两个文件夹的文件并更新

有时候确实有这样的需求，两个文件夹下面的文件都差不多，但是他们因为各种原
因不属于同一个 git 根，至少在没有这些强大的版本控制系统下，我们又需要做对
比更新，那请看下面，需要 diff、cut 以及 bash 内建的 cp 命令。

<src type="sh">
checknew() {
	if [ $# == 2 ]; then
		diff -rqX ~/bin/diff_ignore.txt $1 $2
	else
		echo checknew DIR1 DIR2
	fi
}
</src>

checknew 用来检测那些文件有变动，其中会排除一些文件，文件名的模式放到了
~/bin/diff_ignore.txt 中，我的那个内容如下：

<src type="sh">
*.git
*.so
*.dSYM
TAGS
*.elc
.gitignore
</src>

而 copynew src dest 这是将不同目录下的文件比较后做拷贝更新。

<src type="sh">
copynew() {
	if [ $# != 2 ]; then
		echo copynew srcDir desDir
		return
	fi

	tmp_file=/tmp/ccc.txt
	
	# generate diff output
	diff -rqX ~/bin/diff_ignore.txt $1 $2 | grep "^Files" | cut -d" " -f 2,4 > $tmp_file

	#update file
	magic=12343188
	src=$magic
	for file in $(cat $tmp_file); do
		des=$file
		if [ $src == $magic ]; then
			src=$des
            continue
		else
			cp $src $des
			src=$magic
		fi
	done

	rm $tmp_file
}
</src>

*** [[CategoryLinux][CategoryLinux]] / [[2013-09#p0][Permalink]]  

<!-- date: 2013-09-29T18:45:56+0800 -->

* 13年8月27日 周二 23:47

** Texture''''Packer 图片打包工具

最近在做 2D 游戏开发，用到了图片打包工具，网上搜到的教程好多都是
Texture''''Packer 的，于是就到官网下载试用了一下，因为只用到打包的功能，感觉
还是很简单的。

下载后可以试用一周 pro 版的功能，免费版的功能目前不晓得是否足够支持开发。

后来看到有童鞋联系开发者拿到了 pro 版的 Licese key，我上官网一查，好东西，
说有自己博客并满足一定条件的就可以申请，然后写一片简短的博客做为回报便好。

二话不说，就把自己的博客地址填上去了，然后作者还回信了，德国人真慷慨，给
了 key 不说，还附送了一枚 Physics''''Editor 的 key，真谢谢他了，虽然暂时还用
不到。

于是就有了这篇 blog，in return。

作者还说如果写教程的话可以在网站的教程页面弄个链接，当时我还跃跃欲试的，
可后来发现这个软件虽然支持格式丰富，但貌似没有很复杂的功能，教程还真的很
难写呢。

以后要是用到高级功能，有心得的话再出教程吧。

提供链接 [[www.codeandweb.com/texturepacker]]

*** [[CategoryProgramming][CategoryProgramming]] / [[2013-08#p2][Permalink]] 

<!-- date: 2013-08-27T23:47:42+0800 -->

* 13年8月12日 周一 14:26

** 在C/C++/Objc中快速定位当前文件内的函数

同样是在昨天的那个帖子里面，列出了一些小函数，可以在 Xcode 的 Objc 文件里
面快速跳转到函数、页面定义的成员、"#pragma mark -" Xcode 标签，非常方便
快捷。

我就想着将其适配到 C/C++ 中，因为实在是太方便了，要比使用 speedbar 来定
位跳转简单快捷得多。

由于是使用正则表达式来处理上下文无关的文法，因此严格来说，不管是而在
C/C++/Objc 中，这些匹配用的正则表达式是不完全的，还是可能会错漏的，不过对
于大部分的情况，应该是够用了。

<src type="elisp">
;; for Xcode pragma mark, and C/C++ functions
(require 'anything)
(require 'anything-config)

(defvar anything-c-source-objc-headline
  '((name . "Objective-C Headline")
    (headline  "^[-+@]\\|^#pragma mark")
))

(defvar anything-c-source-c-headline
  '((name . "C Headline")
    (headline  "^[A-Za-z_]+?[ A-Za-z_0-9\*]+[A-Za-z_0-9]+?(")
))

(defvar anything-c-source-cpp-headline
  '((name . "Cpp Headline")
    (headline  "^[A-Za-z_]+?[ A-Za-z_:~0-9\*]+[A-Za-z_0-9]+?(")
))

(defun c-base-mode-headline ()
  (interactive)
  ;; Set to 500 so it is displayed even if all methods are not narrowed down.
  (let ((anything-candidate-number-limit 500))
    (cond
     ((eq major-mode 'objc-mode) 
      (anything-other-buffer '(anything-c-source-objc-headline)
                             "*ObjC Headline*"))
     ((eq major-mode 'c++-mode)
      (anything-other-buffer '(anything-c-source-cpp-headline)
                             "*Cpp Headline*"))
     ((eq major-mode 'c-mode)
      (anything-other-buffer '(anything-c-source-c-headline)
                             "*C Headline*"))
     )))

(add-hook
 'c-mode-common-hook
 (lambda ()
   (define-key c-mode-base-map (kbd "M-i") 'c-base-mode-headline)
))
</src>

*** [[CategoryProgramming][CategoryProgramming]] / [[2013-08#p1][Permalink]] 

<!-- date: 2013-08-12T14:26:25+0800 -->

* 13年8月11日 周日 21:44

** 在头文件与源代码之间快速跳转

今天忙着建立 Emacs 编写 objc 代码的环境，根据这个帖子
[[http://roupam.github.io/blog/2012/10/07/emacs-for-xcode+ios-development/][Setup Emacs for XCode+iOS development]]，里面有说到一个快速跳转 objc 源文件与头
文件的小函数。

我稍微改了一下，可以适应于 C/C++/Objc 的代码，当然，可以再根据需要添加诸
如 Java 语言的支持，反正改起来超简单。

<src type="elisp">
;; jump between source and header file
(defun c-base-mode-in-header-file ()
  (let* ((filename (buffer-file-name))
         (extension (car (last (split-string filename "\\.")))))
    (string= "h" extension)))

(defun c-base-mode-file-jump-to-extension (extension)
  (let* ((filename (buffer-file-name))
         (file-components (append (butlast (split-string filename
                                                         "\\."))
                                  (list extension)))
         (filepath (mapconcat 'identity file-components ".")))
    (if (file-readable-p filepath)
        (find-file filepath)
      nil)))


;;; Assumes that Header and Source file are in same directory
(defun c-base-mode-jump-between-header-source ()
  (interactive)
  (if (c-base-mode-in-header-file)
      (or
       (c-base-mode-file-jump-to-extension "m")
       (c-base-mode-file-jump-to-extension "mm")
       (c-base-mode-file-jump-to-extension "c")
       (c-base-mode-file-jump-to-extension "cc")
       (c-base-mode-file-jump-to-extension "cpp"))
    (c-base-mode-file-jump-to-extension "h")))


(add-hook
 'c-mode-common-hook
 (lambda ()
   (define-key c-mode-base-map (kbd "C-c t")
 'c-base-mode-jump-between-header-source)
))
</src>

*** [[CategoryProgramming][CategoryProgramming]] / [[2013-08#p0][Permalink]] 

<!-- date: 2013-08-11T21:44:07+0800 -->

* 13年7月5日 周五 22:35

** 少有人走的路

今天看完了<少有人走的路>，是一位美国心理医生结合自己多年的临床经验，谈他
所经常面对的普通人的心理问题。

普通人在平常生活中所遇到的内心困境，很多很多的困难都是我们内心所臆想的，
也就是自己的问题，包括社交困难、不自信、拖延症等等，人们的心智成熟远比其
生理成熟来得复杂，也不容易被人们所重视。

我看得比较快，感触也一般，比较深的反而是其描述的重点跟之前唐望系列比较像，
比如自律是基础，然后是丢掉自我重要感，但是唐望的目标是让意识获得绝对的自
由，不受时间空间的限制，而这本书里描述的是这样的:"爱，是为了促进自我和他
人心智成熟，而具有的一种自我完善的意愿"。

对，唐望系列里面也说到意愿，可是与这里面描述的不完全相同，但是却有想同的
部分! 而且唐望里面还有一些无法用言语表达的东西，比如完美无缺的行动，让力
量去呈现，这些感觉都是后知后觉的吧。

本书教给我们四个原则来让自己的心智成熟起来，如推迟满足感、承担责任、尊重
事实、保持平衡。

并且不断强调人的心智是一个不断成长的过程，随着周围环境的变化而变化，就比
如一幅地图，我们不断的在上面描绘，随着我们周围环境的变化不断地呈现，不断
的被重绘而更能反映实际的情况。

我的理解，推迟满足感实际上是让自我去相信周围的环境，我们意愿相信，所以愿
意去先付出，相信将来更好，更好的在将来；承担责任是强调自我对周围的影响，
主动而不依赖，是独立的前提；尊重事实，让想法与行动更贴合实际，就比如上面
所说的个人的地图；保持平衡实际上是让我们自己与历史、社会的习俗、法律等等
保持一个合理的界限，不需要让自我与社会、集体、习俗的对立，但是仍然保持自
我，并且吸取自己需要的东西去成长、去完善。

其实对这本书理解不是很深，因为一方面这些与之前唐望的太像了，而我又先入为
主且更愿意去相信那些类似巫师般教诲的唐望系列。

还有，今天看了两期晓说，都有泪点。

那天在陈嘉庚纪念馆也看了很多类似的视频，华人真不容易。晓说 第二季：第十二
期:南洋大学血泪史，http://v.youku.com/v_show/id_XNTczMzI5NzA4.html

还有晓说 第一季：第三十八期:民国往事之才貌双全林徽因，
http://v.youku.com/v_show/id_XNTAzNDU2MjA4.html ，其实说的很多很多都是民
国时期那些文人之间的八卦，我其实很喜欢听这些老八卦的呀。

*** [[CategoryReading][CategoryReading]] / [[2013-07#p0][Permalink]]

<!-- date: 2013-07-05T22:35:07+0800 -->

* 13年6月13日 周四 14:54

** [iOS] 为 App 提供打开邮件附件的支持

不多说了，先描述使用场景，比如在邮件有附件，或其他 App 中有各种类型的文档，
长按文档标识系统会从底部弹出使用某某某打开，比如使用微信等等。

这种官方的说法是文档交互，需要这样编程处理
[[https://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/DocumentInteraction_TopicsForIOS/Articles/RegisteringtheFileTypesYourAppSupports.html#//apple_ref/doc/uid/TP40010411-SW1][Document Interaction Programming Topics for iOS]]，简单点就是在 App 的 Info.plist 里面
添加以下就可以在系统弹出框里看到使用某某某打开了:

<src>
<dict>
   <key>CFBundleTypeName</key>
   <string>My File Format</string>
   <key>CFBundleTypeIconFiles</key>
       <array>
           <string>MySmallIcon.png</string>
           <string>MyLargeIcon.png</string>
       </array>
   <key>LSItemContentTypes</key>
       <array>
           <string>com.example.myformat</string>
       </array>
   <key>LSHandlerRank</key>
   <string>Owner</string>
</dict>
</src>

这其实算是使用文件作为数据交换，需要指定 app 所支持的类型，这篇总览介绍
了阿婆是如何对待文件类型的 [[https://developer.apple.com/library/mac/#documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE][Uniform Type Identifiers Overview]]，系统定义的
UTI 有这些 [[https://developer.apple.com/library/mac/#documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html][System-Declared Uniform Type Identifiers]]。

在代码里面是在 Application Delegate 的
[[http://developer.apple.com/library/ios/#documentation/uikit/reference/UIApplicationDelegate_Protocol/Reference/Reference.html][application:openURL:sourceApplication:annotation:]] 响应的，添加这个函数就
可以支持了，它会在 willFinishLaunchingWithOptions 以及
didFinishLaunchingWithOptions 之后运行。

参考自 ''''StackOverflow 的
[[http://stackoverflow.com/questions/2774343/how-do-i-associate-file-types-with-an-iphone-application][How do I associate file types with an iPhone application?]]，噢噢噢~~~

*** [[CategoryProgramming][CategoryProgramming]] / [[2013-06#p0][Permalink]]

<!-- date: 2013-06-13T14:54:02+0800 -->

