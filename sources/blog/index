#title Welcome
* 15年6月26日 周五 00:02

** 搬家了

搬到了离原来不远的地方，只隔了一条大马路，不过搬家还是挺累的，靠着那个大
号的行李箱，来来回回也有十多趟的感觉。

新家终于是个独立的单位了，虽然面积不大，还靠近电梯井（所以相对便宜，当然
也还是靠出手快抢的），刚住下的时候，半夜会被电机的启动吵醒，现在是慢慢习
惯了吧，睡得沉了。

然后因为在楼顶，所以开门就是个大天台，晒衣服被子什么的从来都没这么方便过。
房东没开网络，刚好看到 189.cn 有个余额宝宽带套餐，可是钱都交了却被短信告
知参与不了，虽然小区就是光纤到户，可是光纤不到楼顶呀。

联通绑定手机号码的优惠套餐也参与不了，同样是交了钱之后，我都换成 136 的
套餐了，虽然之前房东说闭路天威可以的，联通跟天威都还有合作。

感觉 189.cn 那个互联网部门不靠谱，虽然我也是之前到营业厅各种打听，偶然间
知道电信几个部门都是独立跑业务的，于是在 10000 号查询，让他们帮确认到底能
不能 100M 光纤，不能光纤，也好歹给我拉一条 ADSL 吧，总不能说不能拉，因为
我之前在珠海，开的电信，就是给我从一楼拉到 4 楼的 ADSL，我还有给那个小哥
晃电话线圈到固定位置上。

虽然小区是光纤到户，可是楼顶有些部门确定是不管了。

这段时间就是电话磨，终于 10000 号给了答复，可以拉 100M 的光纤，然后真的
就是从之前的楼层开始往楼顶拉，师傅还没我个子高，于是其实是我自己拉的，师
傅剪了几个电线用来绑东西，让我把光纤绑高一点，架得越高越好，免得被别人扯
下来。。。

熬了好几天，终于上网了，跟之前房东绑架的 50 块每个月，结果谁都上不了网的
状态比起来，天差地别。地方虽小，有了网络就很不一样了。

之前工作上弄的 iBeacon 定位，也在端午之前有了不错的效果，蛮开心的。

虽然这周深圳总在上班时大雨，频频看海，淘宝的家具各种延迟，不过呢，也终于
在今天都到得差不多，基本的东西搭起来，收拾收拾也终于有个样子了。



*** [[CategoryLife][CategoryLife]] / [[2015-06#p1][Permalink]] 

<!-- date: 2015-06-26T00:02:17+0800 -->

* 15年6月7日 周日 21:05

** 有关某宝的 HTC M8 以及深港澳车展

话说 HTC M8 入手不久，一次去某店试穿衣服，M8 放在旧裤袋稍微没有轻拿轻放，
然后裤子放到了木制隔板上时“砰”地撞了一下，上面的喇叭就不响了，再也听不到
电话对面的声音了，只有下面单边了。

当时外面下着雨，我还以为是雨水漏进去了，后来觉得不是这个原因。于是到华强
北修吧，挂着 HTC 广告看似专卖店里面的私人小伙开价 80，我想反正都是私人店，
不如先去别家看看，某家说可以修，结果拆开了前面板就收手说搞不定，搞毛呀。
于是我又回到原来那家，拆了半天，外观有所破损是肯定的，拆开之后，所谓的某
宝 M8水改机无疑。

很多零件都换了，然后呢，这小伙子给我把下面的喇叭换上面就完事了，振动也被
弄掉了，便宜货最后就只能折腾用了。所以，某宝上面的便宜东西，真的是得三思
呀，M8 很难修做好心理准备，虽然全金属机身真的手感爆好。

周六出了一个不小的乌龙，手机上买的电影票最后迟到不说，还走错电影院了，快
赶上某年某月误飞机的节奏了。不过这次买的有点奇怪，美团一直没给我发短信，
迟到后打开美团客户端，团购券也是空的，最后是电话客服才把取票号短信到手机
里，不过已经无用了，走错的电影院跟真正的电影院距离不短呀。

今天去看了深港澳车展，门票 ￥60 人暴多，大波妹没有了，只有高冷小保守的模
特了，依然只会对着单反笑呢，反正我东挤西挤就为了各展区看模特以及表演呢，
虽然后来也腻了。

然后在本田那边有排队玩 Oculus Rift，就是一个虚拟 3D 游戏视频，前面插入了
品牌汽车广告，我带着深度眼镜很不容易套进去呀，还得用手扶着才行，然后也许
是眼镜的问题吧，不舒服不说，视角也不是很好，也许这些都需要调整吧，所以感
觉不好。

不过这玩意儿调整好了，玩游戏是很爽的，有身临其境的感觉，要比大屏幕爽太多
了。

*** [[CategoryMisc][CategoryMisc]] / [[2015-06#p0][Permalink]] 

<!-- date: 2015-06-07T21:05:38+0800 -->

* 15年5月9日 周六 22:07

** 入手 HTC One M8

五一被母上召唤回家，家里有大件要买，我本想着省钱，还盘算着躲过节前市内的
拥堵，下班后可以从城市外围一点赶车回家，然后从福永买票，没想到福永的车是
私人大巴，到站时间非常不确定，车票上写着 20 点开车的，实际报晚点 22 点多
才到，21 点多的时候来了一位大忽悠，说我们车快来了、车转弯过头了，稳定大
伙情绪。

然后走的什么路，一路堵到广州，半夜都是在大广州过的，又高速绕道梧州，然后
下岑溪，五一下午近两点才到玉林，我已经吐了 N 遍血，死了好几次了。

回深圳的时候也是折腾，花了 11 个小时，我是不知该庆幸还是郁闷，相比回家的
那趟。

老娘收走了我的 iPad Air，于是我不得不再买一个，本想国行的，然后拗不过省
钱的心思淘宝了一个港行官修，结果是国行官修，除了淘宝的 cover 不能用遗憾
退掉外，其他功能方面，用来开发的都正常，对了，貌似之前公司提供的 5c 耳塞
也没法在这个上面用。

然后又想换手机，MX4 跟 M8 犹豫中，两个都摸了实体，后来 M8 胜出的原因是机
身没那么宽，然后因为是 HTC 的牌子系统比较新鲜不容易见到特别想尝试，又是
老旗舰系统稳定性加分；MX4 毕竟从未旗舰过，然后配色也偏女性化非常小清新，
有些不符合哥一路绝尘而去的大叔范。

M8 到手摸到现在各种满意，特别是机身机背、全金属的感觉其他机子现在都看不
上了，还有那个 400 万的 ''''UtralPixel 镜头，比我之前的华为 3X 好了无数倍，
特别是夜景，过时的旗舰毕竟旗舰过，真的是不同各档次的完全不能比，也许晓龙
801 也是多多少少加分的吧。

然后之前手握 3X 毫无拍照的意愿，现在是各种新鲜各种跃跃欲试，特别是晚上灯
火霓虹的时候。

加之那个三下巴的系统三键，被我 S-OFF、刷了第三方 Recovery、ROOT，又加持
了 Xposed、绿色守护跟全能手势，可以轻轻松松隐藏且不影响操作，续航也 OK，
除了还没有 5.0 的默认 ART 魔法（暂时 4.4.4 过阵子再折腾 5.0）。

当然也有对我来说的小问题，外插的 Micro SD 会掉卡，我留存在上面的一些 3X
照片信息永远地消失了，虽然那些东西不是很重要。所以 M8 对我来说，也只有
16G 是可信赖的，对于几乎不玩游戏的我，几乎是完全够用了。

就这两块支出，血流了一地，该好好搬砖了。


*** [[CategoryLife][CategoryLife]] / [[2015-05#p0][Permalink]] 

<!-- date: 2015-05-09T22:07:05+0800 -->

* 15年3月30日 周一 15:10

** 升级 Yosemite

完全就是一次被迫升级。

事情的开端在于好奇心升级了 iPad Air 到 iOS 8.2，然后有个 APP 要调，偏偏
Xcode 6.1 的 SDK 不支持 iOS 8.2，然后又是好奇心，下载了个 Xcode 6.3 beta
2，周日下了整整一天呀，宿舍里宅人太多了，各种抢带宽。

到了凌晨才下载完，安装后显示需要 10.10 才能跑，无可奈何。

于是不关机了，通宵 App Store 下载 10.10，我之前升级到 10.9.5 从变色龙到
Clover，用的是懒人版，其实很多安装设置我是不懂的，我只晓得 i3 2120 + H61
跑黑苹果没啥问题而已。

也许 Clover 版本太旧吧，开始安装 10.10 后一直卡在全屏白光，光标变光盘状
不动。

于是重启进入老系统 10.9.5，下了个 Clover 安装，看了一些小道消息，只是拷
贝了 EFI 下的 BOOT 和 CLOVER，其实真正的做法是保留 config.plist 用来参考，
安装 Clover 到系统盘，再配置就好。再原先错误的方式下，系统起不来了，BIOS
后显示插入 media。

手头的 SD 读卡器 + 8G SD 卡这个 H61 主板不认，没法当成启动盘，那个 320G
的 USB 硬盘也不可以。

我差点忘了手头还有一个前几天面试某公司人家当礼物送的 U 盘，现在马上用上
当成系统救急盘了。

将 07 年购入的双系统老笔记本启动到 win7 热身，在 U 盘上装了 Clover 启动
了 10.9.5，重新安装新版 Clover 继续 10.10 的安装，然后启动。

已经是下午 3 点了，折腾。

第一眼的感觉，就是进入系统后感觉扁平化的视觉不如之前的 10.9.5 的好看，其
他方面还没弄，一些软件不兼容，报告的有 VMware 的一些 kext，这个有点蛋疼，
估计要把这个 VMware 给去掉了，以后用那台双系统老机子跑 win7 好了。

*** [[CategoryLinux][CategoryLinux]] / [[2015-03#p2][Permalink]] 

<!-- date: 2015-03-30T15:10:10+0800 -->

* 15年3月7日 周六 23:41

** [iOS] 被逼的 VFL

把几年前的 app demo 搬出来，当年还没有 5、5s、6、6p 的时候，界面的布局是
简单的，可是这两年 duang 一下出来了这么多新机器，现在 iOS 下屏幕分辨率的
分裂程度也是让人目瞪口呆。

当年一个控件 xib 就可以横行天下，5、5s 出来后有些控件不得不加了一个 xib，
6、6p 出来后，我想我有时是拒绝使用 xib 了，妹的 6 跟 6p 的分辨率都没什么
关联嘛。

官方的说法 5、5s、6 都是 2x，6p 是 3x，并且为动态的控件还加了 autosize，
可这玩意儿我不懂用。

学着在 xib 里面使用 constraints，总是达不到自己想要的效果，折腾了好久好
久，腰酸背痛是真的。

看了一下官方那一页 VFL，第一次感觉到不知所云。于是上 github 找替代品，比
如 ''''PureLayout，用了一下，使用上有些限制，且效果仍然不是我想要的。

说一下我要的效果，table view cell 里面放多张方形图片，portrait 跟
landscape 下布局不一样，前者是

<example>
space | image | space | image | fixed space
</example>

后者是三个 image，而且我还考虑 6p 下面多加一个 image。如果我选择 xib，不
是累死。

即便 ''''PureLayout，还需要我指定中间间隔 space 的宽度，可我想这不是需要动态
计算的吗，如果我能知道这个宽度的值，我都可以自己计算 frame 的大小咯，还
要constraints 干嘛，我都 specify 了。

我不明白的是，当年 CSS 都可以指定某个标签具体位置的百分比，方位，为啥水
果的 VFL 不行呢，看起来 ''''PureLayout 也不好使呀，比如第三个例子，我想要的
效果还有距离。

于是又 baidu、bing VFL 的资料，官网又硬着头皮看了一下，终于有点开窍了，
后来发现其实 VFL 是简单的。

它的基础是所有需要动态伸缩的东西，都是一个 UIView（我是这么理解的），所
有的数值，都是固定的，要么是间隔，要么是相互关系，比如宽是高的两倍。

这就清楚了，其实官方 VFL 里面的 Spacing and Wrapping 举的例子就很清晰了，
我上面要的效果里面，space 都是 UIView，动态计算就好。

指定三个 image 宽、高相等，三个 image 的宽都相等，多个 space 的宽都相等，
然后在指定 image 的高度（Y值）就足够了，后面 fix space 就不需要一个
UIView 了，可以直接指定了。

相比之下，感觉到是 IB 里面的 constraits 反而操作复杂了，而且经常是说限制
不够，运行又出错什么的。

可是明明二维的坐标，x、y 可以确定的话，那个东西就固定了呀，IB 会有让我找
不着北的感觉，且里面的 constraints 也不容易看出来，太乱。

相比之下 VFL 就好很多，只是概念不好说清，比如那个 space，我是先入为主，
觉得为啥不能像 CSS 一样，直接指定 UIView 的位置呢，谁能想到即便官方的文
档里面，需要动态计算大小的元素，只能是 UIView。

写了一点 VFL 后，github 上又找了 Auto Layout Shorthand，但貌似不是完全的
映射，它自己封装了一些东西，只能作罢。

所以我也简单封装了自己的一些东西，试用了一个小时，感觉还不错，也放到 gist 上面
了。

<src type="objc">
// formula as 'width == width'
static NSLayoutConstraint*
_lcItemRel(UIView *v1, NSString *formula, UIView *v2, float ratio, float constant) {
    static NSDictionary *attrValueForName = nil;
    static dispatch_once_t attrOnceToken;
    dispatch_once(&attrOnceToken, ^{
        attrValueForName =
        @{
          @"left":      @(NSLayoutAttributeLeft),
          @"right":     @(NSLayoutAttributeRight),
          @"top":       @(NSLayoutAttributeTop),
          @"bottom":    @(NSLayoutAttributeBottom),
          @"leading":   @(NSLayoutAttributeLeading),
          @"trailing":  @(NSLayoutAttributeTrailing),
          @"width":     @(NSLayoutAttributeWidth),
          @"height":    @(NSLayoutAttributeHeight),
          @"centerX":   @(NSLayoutAttributeCenterX),
          @"centerY":   @(NSLayoutAttributeCenterY),
          @"baseline":  @(NSLayoutAttributeBaseline),
          };
    });
    
    static NSDictionary *relationValueForName = nil;
    static dispatch_once_t relationOnceToken;
    dispatch_once(&relationOnceToken, ^{
        relationValueForName =
        @{
          @"==":  @(NSLayoutRelationEqual),
          @">=":  @(NSLayoutRelationGreaterThanOrEqual),
          @"<=":  @(NSLayoutRelationLessThanOrEqual),
          };
    });
    
    NSArray *kv = [formula componentsSeparatedByString:@" "];
    
    NSLayoutAttribute a1, a2;
    NSLayoutRelation r;
    
    if (kv[0]==nil || kv[1]==nil || kv[2]==nil) {
        return nil;
    }
    
    a1 = (NSLayoutAttribute)[((NSNumber*)attrValueForName[kv[0]]) integerValue];
    a2 = (NSLayoutAttribute)[((NSNumber*)attrValueForName[kv[2]]) integerValue];
    r = (NSLayoutRelation)[((NSNumber*)relationValueForName[kv[1]]) integerValue];

    return [NSLayoutConstraint constraintWithItem:v1
                                        attribute:a1
                                        relatedBy:r
                                           toItem:v2
                                        attribute:a2
                                       multiplier:ratio
                                         constant:constant];
}

static NSArray*
_lcAryOfVFL(NSString *formula, NSLayoutFormatOptions opt, NSDictionary *metric, NSDictionary *views) {
    return [NSLayoutConstraint
            constraintsWithVisualFormat:formula
            options:opt
            metrics:metric
            views:views];
}
</src>

gist 地址，https://gist.github.com/lalawue/430102f68327fe302964, 请自备
梯子。（最后又发现了个不错的 [[https://github.com/floriankugler/FLKAutoLayout][FLKAutoLayout]]，不过没用过，具体就不知道了)

*** [[CategoryProgramming][CategoryProgramming]] / [[2015-03#p1][Permalink]]

<!-- date: 2015-03-07T23:41:59+0800 -->

* 15年3月7日 周六 23:22

** 播放器使用 OpenAL 需要注意的

扯一下写在线视频播放器使用 OpenAL 遇到过的坑吧。

由于不涉及到 listener 的位置与加速度，openal 参数的设置是简单的，且仅仅
只需要一个 source，一定量的 buffer，加上 streaming 的操作。

第一个问题来了，streaming 的操作，多个 buffer，可具体需要多少个呢，这个
还真不好说。我做过一些边界测试，不过没那么详细，iOS 真机还是模拟器上面，
总共可以开到 512 个 buffer name，这个数量总该够了吧。

或者，buffer 固定数量，自己先缓存一定量再扔进去，这样就解决了 buffer
name 不够的问题。我这边播放 1M 多的码流，每个 audio packet 大概 8k，可以
算出来自己需要缓存多少时间。

第二个问题，其实是 OpenAL 默认的情况，就是 queue 上去的 buffer，播放完毕，
到达 stop 的状态后，新的 buffer queue 进来，其实仍然是 queue 到这些
buffer 的后面去，一旦设置成 play 状态，会先播放一遍已经 stop 的旧数据。

这个 bug 瞒了我很久，因为我之前的 seek 有些问题，加上 audio cache 又不多，
现象不明显。

这意味每次 queue 新的 buffer 进去之前，把里面的 processed buffer 都给
unqueue 先才行，这绝壁是个坑啊，哪有 stop 后还赖着不走的。

第三个问题，processed 后的 buffer name，其实在 C 的操作里面，不好存到已
有的 buffer 数组里面，得新开一个 free_buffer name 的数组，来存放已经
processed 的 buffer name，要不然这些 buffer name 会丢失，再想扔新的数据
时就找不到它了。

如果无论如何都先 queue 完已申请的 buffer name，然后再取 processed 的，就
能避免这个问题。可这又溶于遇到第二个问题，我就是这么绕进去的。

典型的 API 足够简单，但是使用小别扭的问题。OpenAL 我是参考了 1.1 的
specification，对于写视频播放器足够了，iOS 上官方说是低阶 API，性能足够，
且又跨平台，何求？

*** [[CategoryProgramming][CategoryProgramming]] / [[2015-03#p0][Permalink]] 

<!-- date: 2015-03-07T23:22:57+0800 -->

* 15年2月28日 周六 23:44

** IUP & vs2012

过年在家搭建了 app 的 win 服务端，create install 免费版打包，已经可以使
用了。

架构方面，两个程序组成，都是 win32 api，不需要依赖 dot net。

网上抄的一个 win32 任务栏图标代码，在此基础上加入了之前的跨平台服务端线
程，就跑起来了。

设置界面用的是 IUP 界面库，一个支持 win、gtk、motif 的框架，事件驱动，要
比基础的 win32 gdi 编程好太多，而又不需要依赖 dot net。

之前为了 IPC 通信，还尝试使用了 mail slot，不过当时我的架构不是很好，出
了不少问题，最后也没有继续用下来去，而是直接 findwindow，通过标题栏、
class name 匹配，然后 post message 来通信，感觉也足够了。

学习使用 iup 也花了一些时间，相比之下，为了让 vs2012 支持 xp 而弄的各种
调试，简直让人吐血。

后来我是放弃了 vs2012，改用 vs2010，xp 可是不能放弃的。vs2010 还必须安装
sp1 才行，否则编译下来各种问题，即便是 sp1，也不是每次编译都能顺利通过。

一个 sp1 补丁包就 1.5G，也够吐血的。


*** [[CategoryProgramming][CategoryProgramming]] / [[2015-02#p1][Permalink]] 

<!-- date: 2015-02-28T23:44:09+0800 -->

* 15年2月14日 周六 00:38

** [iOS] dispatch_after

忙活的网络播放器有了眉目，音视频同步起来了，之前的问题，在于 audio 播放
一直很不顺利，总是偶尔会卡，或者嗤嗤地想，我一直单独地认为是 audio 播放
的问题，或者是 OpenAL 管理 buffer 的问题。

当然后来也发现 OpenAL 的 buffer 管理也是需要注意的，比如建立了 64 个
buffer，做 streaming，最好是都先全部 queue 上去，再 query 哪些已经
processed，之后 buffer data，之后再 re queue；而不是先 queue 一部分，
query 无 processed 之后，queue 新的 buffer，iOS 上面者会造成嗤地噪声，估
计是 OpenAL 管理的问题。

当然 OpenAL 在我这里还有一些未解决的问题，以后再说吧。

接着说不同步的部分，更多的是时钟不同步造成的，也就是延时。

比如主时钟一般都是 video 管着的，而 video 每一帧时间跨度要比 audio 大多
了，一秒才小几十帧，每一帧稍微拖延或快一点，其实我们人眼不敏感，而 audio
呢，普通的 22k 都是差的音频，一般 44.1k，或者 48k，这个时钟相比 video 部
分就要求很精确了，当然这部分其实都是硬件管着，封装出来的 OpenAL 接口也简
单，扔 buffer 进去就行。

问题在于 video 管时钟，video 拖延一点，我们人眼觉得 video 还正常，但是怎
么 audio 就那么刺耳了呢，其实是 audio 的 buffer 数据跟不上了。

在 iOS 平台上面，是 dispatch_after 等这些延时的函数时间非常不精确，虽然
是以 nano seconds 为单位的，但是这个单位只是说能够延时的最小单位，而并不
是精确到这个单位，这两者是有很大区别的。

所以 AV 同步部分就得做很多的时间检测以及补偿，如果是 video 主时钟，就补
偿 video，并不是为了人眼看得舒服（其实真看不出来），而是为了 audio 能够
顺利同步，两边的 buffer 都能够平衡。


*** [[CategoryProgramming][CategoryProgramming]] / [[2015-02#p0][Permalink]] 

<!-- date: 2015-02-14T00:38:00+0800 -->

* 15年1月30日 周五 12:42

** 有关 GLFW

这段时间做的项目是使用 GLFW 来做跨平台的播放器，大体上框架已经好了，音视
频也同步了，大概花了快两周时间，然后也是今天才知道 cocos2dx 3.x 系列是用
glfw 来做 opengl 窗口管理的，我是没有继续深究了，不过因为看到这个，忽然
有种我选得没错的感觉。

GLFW 横跨 Mac/Win/Linux 三个平台，提供基于 OpenGL 渲染窗口，消息机制，这
点很不错，大体上统一了三个平台基础 OpenGL 的创建，销毁，以及鼠标、键盘消
息。

我之前因为想学习 OpenGL，看到的很多国内教程都是 glut 来入门，而且还是
OpenGL 2.x 系列的 API，实际上，现在都已经是 3.x 系列的 API 了，当然系统
总是向下兼容的，老的 API 也能用就是。

若是现在开始涉及到桌面 OpenGL 部分的，强烈推荐呀。

*** [[CategoryProgramming][CategoryProgramming]] / [[2015-01#p2][Permalink]] 

<!-- date: 2015-01-30T12:42:25+0800 -->

* 15年1月15日 周四 01:34

** 获取默认网卡的 IP 地址

目前在做一个简单的服务端程序，需要客户端发现服务端的 IP 地址，然后请求链
接。发现部分是用 UDP 的广播来做了，但是服务端获取 IP 地址部分，遇到了问
题。

服务端里面 TCP bind 时，地址是可以为 INADDR_ANY 的，意味着不管是哪个网络
过来的数据，只要路由到系统，端口对应上，我的服务端程序就可以 accept。看
起来美好，但是流程上走不通，这时候程序其实是不知道 IP 包是从哪个网卡过来
的，所以即便接收到了客户端的 UDP 广播请求，也仍然无法发送可以连接的 IP
地址给客户端，因为从系统里面获取地址的 getsockname() 获取的其实是之前
bind 的地址，也就是 &#34;0.0.0.0&#34;。

路由都已经通了，但却无法获取路由过的网卡 IP 地址。如果这一切都只能通过之
前的 bind 来显式地指定只接收某个网络过来的包，确实是太折腾了。

简单点，不如就是用系统默认网卡的 IP 地址好了，至少系统保证这个是最为可用
的地址。

MacOS 下获取系统网络设备名称以及地址跟 Linux 下的相似，都是 getifaddrs()，
搜到了一篇中文介绍；然后获取系统默认网卡的信息，我是从 stackoverflow 上
面搜到的。

 - [[http://www.cnblogs.com/sammei/p/3955679.html][getifaddrs]]
 - [[http://stackoverflow.com/questions/4872196/how-to-get-the-wifi-gateway-address-on-the-iphone][How to get the WIFI gateway address on the iPhone?]]

这样，bind 的时候仍然可以为 INADDR_ANY，客户端 UDP 广播请求的时候，服务
端大方发送可连接的 IP 地址。扯远点，复杂点的情况，多个网卡，多个异构网络，
服务端可以根据具体的请求发送不同的 IP 地址，只要能路由过来，都可以
accept。

大概就是这个意思了吧。

*** [[CategoryProgramming][CategoryProgramming]] / [[2015-01#p1][Permalink]] 

<!-- date: 2015-01-15T01:34:41+0800 -->

* 15年1月3日 周六 11:19

** HTTP Downloader

忙了两天多那个 [[https://github.com/lalawue/http_downloader][HTTP Downloader]]，原来只是想实现一个 keep-alive 的连接的
socket，当时也想到这个东西不会简单，因为一方面底层的是 low level 的
socket，另外一方面呢，需要处理一层 http 协议，还有一个 dns。

后来是因为找到了 dns 的代码，就开工了，才发现复杂呀，一方面 c 的部分我觉
得我大意了，编码不够小心，各种折腾。

另外就是 c 的 string 库太不好用了，所以不得不封装了一个，至少得有 split
这个函数吧，没有的话啥都不用玩了。

其实大概一天不到基本的 http get 已经完成了，只是代码太糟糕，我觉得需要改
进一下，最主要的就是 string 库，于是昨天折腾了快一天呀，代码清晰了很多。

这个 string 库是有 gc 的，从 head 操作产生的其他 object，都会随着 head
的 destroy 而 destory。新建 head 的 interface 就那么几个，很有限，所以其
实可以在开始复杂操作时新建 head，之后后清除掉那个入口的 head。

新建 head 的接口除了 malloc 一段 cstring，还可以 map 一段 cstring 地址给
它作为操作的空间，这时候内部标记 clone，就是这个 mstring 的 cstr 地址不
是自己保存的，之后的 destroy 不用释放这个空间，对于像 http head 或者
body 的分析时，这个就很有用了。

由于新建 mstring 的空间其实是堆上的，对于各种小操作时产生的 mstring，不
大好，还不如 cloudwu 那个栈上的方式，栈上的方式新建轻松，而且没有碎片的
产生。

不过呢，就是得随时注意，这些栈上的对象何时销毁，需要的时候需要转成堆上的
对象。

我有个想法，其实这些小碎片，不如申请一个专用的堆来操作，比如这个堆绑定在
head 的 allocator 上，从 head 产生的所有 object 都是用这个 allocator，这
样就避免了大量的小对象，对于内存碎片的控制是有益的，特别是对于那种 map
cstring 过来的对象，因为本身 cstring 空间是不用释放的，这时候就很有用了，
因为 mstring 自己控制用的结构，空间占用不大。

不过呢，新建的 heap 多大才有用而又不至于浪费，那就又是另外一回事了，以及
这个接口如何提供的问题，这个想法还得斟酌一下。

*** [[CategoryProgramming][CategoryProgramming]] / [[2015-01#p0][Permalink]] 

<!-- date: 2015-01-03T11:19:57+0800 -->

