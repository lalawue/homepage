#title Welcome
* 17年4月16日 周日 22:52

** m_tunnel 支持 Win7

其实 [[https://github.com/lalawue/m_tunnel][m_tunnel]] 使用单 TCP 来连接本地、远端有风险，就是 TCP 本身并不是为流
速设计的，而是为流量设计的，这使得很多请求，在 TCP 网络不稳定的时候，很
容易就被卡住，而这里本身的设计，就使得后一个请求，跟前一个请求发生了关联，
要卡大家一起卡。

这个大 BUG 是最开始设计的问题，后来就想转而使用 KCP 来做中间的管道，而不
是使用 TCP，当然当时也有不少使用 KCP 的类似工具了。

最近是看上了 [[https://github.com/xtaci/kcptun][kcptun]]，一个使用 kcp 来做管道的工具，管道还需要配上两端的
shadowshocks，来为浏览器等提供标准的 socks5 接口，以及对应远端发起真实的
请求。而我则刚好可以使用 m_tunnel 来替代 shadowsocks。加入 Win7 的支持，
则是因为现在玩游戏比较多了，算了一下，在 Win7 下面的时间更多。

还好，用 VS2017 建立工程编译，需要修改的东西不多，就可以跑了，效果是杠杠
的，当然，m_tunnel 是用的是 select 来实现 MacOS、Linux、Windows 三端接口
一致，而不是 libuv 这类框架。

使用 select，就有一些效率的问题，但如果不是做极端的 server，其实是没有关
系的，这个我也有一些 CPU 使用量的数据；还有就是 socket 同时使用的数量是
有限制的，但是对于一般人来说，其实都足够了，因为你真的很难很难能够同时用
完 select 提供的最大 socket 数量。

我这边也提供了一个 Win7 的 [[https://github.com/lalawue/m_tunnel/releases/download/v20170415/mtunnel_local_windows_amd64.zip][precompiled 版本]]，自己则是买了 Linode 东京每
月 5 刀的套餐，在 SZ 看 Youtube 720P 几乎秒开，大概这样。

*** [[CategoryProgramming][CategoryProgramming]] / [[2017-04#p1][Permalink]] 

<!-- date: 2017-04-16T22:52:47+0800 -->

* 17年4月16日 周日 22:42

** emacs-wiki-mode 已死

为这个静态站点更新了几个链接，RSS 地址，还有搜索地址，这个站点不知不觉已
经超过了 10 年，保留了最开始学习 Linux 的点点滴滴，各种嬉戏玩耍，不过，
开始工作一段时间后，这里就都是流水了。

自从搬家到了 ''''GitHub Pages，省心了很多。十年前，用 Wiki 的方式记录并连接
各个页面，用 Emacs 作为工具编写并转换成 HTML 是一个新奇的方式，现在，还
有谁会抱着一个客户端来写博客，有了通用的浏览器，和强大的 JS，Web 可以扮
演所有的东西。

所以当我在 google 里面搜索 emacs-wiki-mode 时，已经搜索不到什么有用的东
西了。也许最开始大家只是使用 emacs 来写 ''''LiveJournal，最后变成了 wiki，最
后大神 maintain 了这个 project，然后变成了 ''''EmacsMuse，然后 muse 成了 GNU
的官方项目，那时候 emacs-wiki-mode 就已经半死不活，有谁还会用一个老项目？

之前 github 上的 emacsmirror 还保留着 emacs-wiki-mode，当时看到这个老项
目，我还是蛮开心的，没想到现在上去翻找，已经搜不到了。

也许我比较古旧吧，还用着这个 mode 写东西，反正也挺趁手的，反正写的也很少，
反正都是流水，反正这个附加挂上去的 emacs-wiki-journal 也是我自己一个人用
而已。

本来还想把自己用的 emacs-wiki-mode 源代码挂到 github 上，现在有点犹豫了。

*** [[CategoryThisSite][CategoryThisSite]] / [[2017-04#p0][Permalink]] 

<!-- date: 2017-04-16T22:42:10+0800 -->

* 17年3月18日 周六 10:43

** Git 二三事

之前公司一直在用 svn，虽然我也有用 github，但并没有真正参与过多人开发的
情况，分布式的 git 在多人开发方面与 svn 有很多不同。

git 是完全并行的开发，意味着提交的时候，origin 远端只是看对应文件能否
merge，不不冲突的话就直接接受了。可是如果我们看版本线，会有这样的情况，
本地刚提交的版本的上一个版本，并不是远端的末端版本，也就是说，在我们这两
次提交的中间，其他人已经有版本提交到远端了。

如果用 source tree 这样的工具看，可以看到本地上个版本对应的远端版本，很
可能有多条线并行出来；先提交的同学，版本线在主线上，后提交的同学，版本线
被并行出来，在最后提交的版本上合并。

svn 呢，因为没有分布式的概念，因此只有一条开发线。

为了更明晰远端库的版本线问题，每次 push 到远端前，需要在本地分支上
rebase origin 分支，其实就是先找到本地跟远端版本的公共父节点，从这个点开
始，将远端的版本合并到本地分支，再将本地分支这个公共父节点版本后的代码，
一个个 apply 上去，之后再 push 到远端，这时候就只有一条线了。

因此，merge 仅仅在末端版本上合并代码，而 rebase 则会找到公共父节点，重整
版本线。

另外一种情况，是本地再多开分支，其中一个分支用来同步远端，这个时候，本地
的另外一个分支，提交的顺序是先提交到本地同步分支，同步分支再 push 到远端。

这个时候，如果要保证三个分支的末端版本一致，同步分支可以先 rebase 远端，
保证末端版本与远端一致，本地分支再 rebase 本地同步分支，本地分支版本线也
与远端一致了；之后，同步分支 merge 本地分支，再 push 到远端。

或者也可以这样，本地同步分支先 merge 本地分支，再 pull rebase 远端，再
push 到远端。不过这个时候，这个用来并行开发的本地分支，版本线跟远端很可
能已经不一样了，这个又要怎么整呢，:)

坑好多呀，因为之前不明白这些，请教了组里面的一位实习生大神，才终于弄懂了。

*** [[CategoryProgramming][CategoryProgramming]] / [[2017-03#p0][Permalink]] 

<!-- date: 2017-03-18T10:43:54+0800 -->

* 17年2月7日 周二 22:18

** ''''AirPods 蓝牙耳机

16 年 12 月中旬定的货，1 月中旬发的货，本来是想买来送人的，后来不了了之，
然后又不想退，索性自己用了吧。

连接佩戴都挺方便的，舒适性上面也还不错，连接了手机、平板，用哪个就连哪个，
唤起 Siri 的没怎么用，觉得鸡肋。声音质量上面，跟有线的差不多，因为多了那
个充电盒子，这个是真方便，不容易丢东西了，然后旅行时也好收纳，续航方面没
长时间用过按下不表。

我用的蓝牙耳机不少了，虽然都是低端货，比如爱国者的 S20，还有魔浪的 U2，
及大康的运动耳机。

其中大康的运动耳机用得最久，跑步用的，效果还行，但跑步时风阻的声音有点大，
用了大概 1 年，就不容易连上了，估计是因为汗水还是其他原因老化了吧，然后
电池也渐渐不够用了，很快就没电，之前都至少能 4 个小时的。

因为这个原因，才有了后面的几款，跟之前大康的不同，不想要专门跑不用的了，
半开放的，半运动的蓝牙耳机就好了（轻微夹耳的，不容易掉）。

魔浪的 U2 仅仅是试用，因为在我的 6sp 上，声音太大，调不低，郁闷的是安卓
机可以调低声音，苹果手机却不可以，跟客服墨迹了很久，他们也搞不定，只好退
了。不过呢，对这个耳机的做工印象不错，连接线很柔软，戴起来也舒服。

爱国者的 S20 用的时间不多，虽然是半开放式，但是耳机有点大，相比魔浪 U2，
能调整声音大小是个极大的优势，但连接线是扁平的，不够柔软，其实我不喜欢，
不过当时很想要一个这样半开放的蓝牙耳机，综合之下这个是最好的了。

可惜 S20 用不长，上班是越来越忙了。

*** [[CategoryLife][CategoryLife]] / [[2017-02#p0][Permalink]] 

<!-- date: 2017-02-07T22:18:18+0800 -->

* 16年10月16日 周日 10:06

** 传奇500和大梅沙

十一前修好了那辆破自行车，虽然这车也跑梧桐山二线关，但对那个北山道的大长
坡还心有余悸，且总觉得这车档次太低，跑这种长路要花费太多不必要的体力。轴
差的就太费劲，变速差点还好，心想着弄一辆 2k 左右的车吧。

当然是去买全装，自己不懂也没时间去折腾这个。其实有名的国产货不多，喜德盛
算一个。从价钱上面开始挑，首先是逐日 800，可是居然还不是培林轴，这对于老
想着从南山跑盐田的我来说，有点难接受呀。

再说上次去修车踏板的时候，老板第一推荐的就是传奇 500，网上介绍的也都是传
奇 500，由于价位很不同，所以逐日 800 跟传奇 500 没啥可比的，后者已经是准
专业的车了。

纠结了好多天，由于加班也多，平时根本没时间去看，反正买了也没时间骑。等到
了前晚，周五的时候，下班后赶紧回家收拾好东西，想着要是明天就开跑梧桐山二
线关，今晚就要把车拿下了。

见到了熟悉的老板，搞了辆蓝黑色系的，对比了一下 15 寸、17 寸，发现还是更
习惯 15 寸的，自己原来那辆也是 15 寸的，就它了。

配好了第二天需要的衣服、水，周六早上 8:40 出门，风一样就出发了。尝了一下
好久没吃的肠粉摊，上北环，找到了之前不知道的桥洞，不用再车骑人过天桥了。

好车就是不一样，到了梧桐山脚，是要比之前提前了一个小时。二线关石板路上认
识了新朋友，本想着忽悠他去三洲田的，聊了一下，没想到三洲田其实就是我上次
走的那条路，不过那条路其实水泥路结束了之后，还有一段呢。。。

然后反被他忽悠去大梅沙了，到了盐田，大梅沙就不远了。走的是海边栈道，很舒
服，只是这海边栈道名不副实，因为外面靠着大海的都被填得差不多，草那么长，
好多地方只能看到绿海随风而动。

好车相比骑起来毫不费力，一脚就能蹬很远，下坡速度更快，反而是油碟太灵敏不
习惯，只能点刹，不断地点刹。如果尝试把车刹死，是要摔跟斗的，不晓得车轻还
是因为速度太快。比如刹后轮，如果刹死，速度不怎么变慢，反而是后轮胎嚓嚓嚓
地直接磨下去了，无解。

比如北山道那条大长坡，速度要好好控制才行，要不很容易就飞出去。

好车跟差点的车真的是大不同，长距离骑行还是选好车吧，时间节省、体力节省至
少 1/4，一点都不夸张，完全自测的结果。要知道，我今年这个时候的体力是不如
去年这个时候的。

*** [[CategoryLife][CategoryLife]] / [[2016-10#p0][Permalink]] 

<!-- date: 2016-10-16T10:06:15+0800 -->

* 16年5月8日 周日 20:36

** 思绪

这思绪像风<br />
有时温暖湿润<br />
有时清冷异常<br />
总是不经意间就碰上<br />
还未来得及琢磨<br />
便眼睁睁地看着另外一个我<br />
被它带到不知名的地方<br />

*** [[CategoryLife][CategoryLife]] / [[2016-05#p1][Permalink]] 

<!-- date: 2016-05-08T20:36:25+0800 -->

* 16年5月4日 周三 00:50

** 稳定版的 m_tunnel

之前的 [[https://github.com/lalawue/m_tunnel][m_tunnel]] 不稳定，有多个原因，最主要的，是由于只用一个 tcp 连接
local 跟 remote，免不了协议、数据分割，两边的 socket 状态不容易保证同步，
比如 local 的关闭了，remote 的也要同步关闭，反过来也要保证一样。

之前的处理方法，是用了好几个变量保证状态，搞得好复杂，其实也没有对上，所
以很容易跑飞。现在的处理方法，是 remote 跟着 local 变，local 请求后
remote 才创建 socket 去 connect，双方使用一个几乎不会重复的 magic number
来对标，留着 chann_id 作为资源索引值。

双方不管谁先关闭 socket，都会发送消息给对方，但如果对方的资源池里面没有
对应的 magic number 了，则这个资源就已经被释放了，也就保证了同步，类似虚
拟链路一样。

另外一个问题，比较不容易发现，因为自用的是 MacOSX，默认设置 listen 的
socket 为非阻塞的之后，后面 accept 的 socket 也都是非阻塞的。但是 linux
下面不是这样，需要单独对每个 accept 的 socket 设置为非阻塞才行。

这个版本还将 dns 单独出来了一个线程，避免阻塞主循环的消息接收发送，不过
呢感觉 dns 不太稳定呀。

目前自测单用户是没啥问题了，只是缺乏加密，这个放到 TODO 里面，不定非要完
成了。

五一去了罗浮山，又是马大哈错过了一班整点车，然后又遇到堵车了，到了惠州总
站去罗浮山景区又堵，看到缆车那里排了 2 个小时的长队，于是没上山顶，若是
自己爬上去的话，售票员说要 5 个小时。只好走马观花，看看人潮，把五一就这
样消费掉了。

再找找看有啥好玩的项目吧。


*** [[CategoryProgramming][CategoryProgramming]] / [[2016-05#p0][Permalink]]

<!-- date: 2016-05-04T00:50:41+0800 -->

* 16年1月24日 周日 12:30

** Pebble Time

上个月底美亚直邮的 Pebble Time 到手，黑色款，样子我是十分喜欢，丰富的表
盘不多说，虽然是塑料表带材质，不过表盘外圈是金属的，所以对我来说不是问题，
我反而是不太喜欢全金属的类型，觉得风格是太硬了。

戴了两周，即便口袋没有手机，步数、睡眠都纳入数据量化了，这点是很大的转变，
我也终于知道自己的睡眠质量是多么的差，除此外，小工具 timer 等都很有用。

只留了一个电话通知的 Notification，觉得有这个就够了，其他的通知都是不重
要的通知，就让它们留在手机里吧。

这个月是刚给家里人下单了一台 11.6 寸的小本，赛扬四核，性能对于看网页、炒
股应该是足够，市面上相同屏幕尺寸这个价位的，大多都是凌动的 intel 芯，算
是平板的核，运算力上应该是赛扬更好。

夹持 128G SSD，操作应该会迅捷便利吧，到手后再仔细评估下，工作用台式，出
差等等，这样的小本其实是完全足够了。

*** [[CategoryLife][CategoryLife]] / [[2016-01#p0][Permalink]] 

<!-- date: 2016-01-24T12:30:54+0800 -->

* 15年12月9日 周三 23:41

** 类 Shadowsocks 的 sock5 proxy － m_tunnel

也是好奇，自己写了一个类似 shadowsocks 的 sock5 proxy，与其协议不一样，
local 跟 remote 是通过一个 TCP 连接起来的，两边的数据，都通过这个 TCP 连
接。

当时这么设计，是觉得，每次一个 TCP 过去，重新握手，认证，是个多么麻烦的
事情，如果之前已经认证好了，就走一个通道就行了，反正都有加密嘛，不过现在
看来，也许是麻烦的开端，因为这意味着需要下面的协议内容：

 - connect
 - data
 - close

data 部分就是切割数据，connect 部分意味着异步连接，close 也要保证同步，
而且任何一方都要关注到底是 server 还是 local 关闭的。

现在这个软件不太稳定，可是总感觉不是代码上面的问题，而是协议处理上，还需
要斟酌一下。

还有，其实如果是使用 shadowsocks 那样每个 local 进来的 tcp 都单独链接，
其实更容易处理些。

不扯了，地址是 https://github.com/lalawue/m_tunnel.

*** [[CategoryProgramming][CategoryProgramming]] / [[2015-12#p0][Permalink]] 

<!-- date: 2015-12-09T23:41:54+0800 -->

* 15年11月21日 周六 23:01

** 升级家用电脑

12 年初买的那台黑苹果，因为散热不好（小机箱），我总是开着侧盖使用，估计
是这个原因，主板加速老化，加上又不是大厂的主板，终于在一次我用虚拟机玩
LOL 结束之后，直接闪屏，后来再也无法启动。

我的显卡年中时已换成 GT650，所以肯定不会是显卡过载之类的问题，由于 CPU
是 I3 2120，也是蛮旧的 CPU 了，所以也想着吧这个换了吧。

网上看了下配置，大概如下 I5 4590、技嘉主板、120G SSD，中等的小机箱，算下
来大概 2k 这样，由于前几天加班，今天又是恒大决赛，时间紧迫，不想淘宝、京
东慢慢等货了，于是去了华强北，也是第一次到华强北装机（之前的黑苹果是淘宝
来的）。

整个流程其实挺顺利的，由于价格比较透明，所以商家也不会坑很多，最终配的价
格是 2.2k，我还算接受，反正 2 个小时不到，商家帮我装好机，我就可以带回家
了。

在 120G 的 SSD 上也装了黑苹果，10.11 的系统，安装很快，然后之前的 500 GB
硬盘，当存储盘用，开机速度，以及应用程序要比之前快了不少，目的达到了。

不过 I5 的 CPU，实际上感觉没有太大的差别，毕竟处理的东西也不多，如果只是
写程序，其实也不会有那么高的要求吧，总的来说是快了一些。

*** [[CategoryLife][CategoryLife]] / [[2015-11#p0][Permalink]] 

<!-- date: 2015-11-21T23:01:28+0800 -->

* 15年10月25日 周日 23:17

** OS X El Capitan

每次升级都是手忙脚乱的，先是周四的时候 6s plus 升级到了 iOS 9.1，到了公
司，7.0 的 Xcode 用不了了，赶紧升级 7.1，然后想想升级系统吧，就上了 EI
Captian，公司用的是正规的水果机器，下班才开始安装，周一可知结果，应该问
题不大。

可是家里的黑苹果就出问题了，Applications 里面安装 EI Captian 的 app，装
完后死活进不去系统，在 tmpData 就出错了，还没挂载文件系统呢。

折腾了好几次，还好有 8 年前的笔记本，那个没了显示器只有 VGA 外接显示屏显
示的笔记本，跑起了 WIN7，下载了所谓的懒人版，一个 8G U 盘，当起了救星。

不过呢，原来的分区仍然起不来，还好有个单独的 50G 分区，抹盘后给它安了新
系统，备份旧数据，由于空间有限，不得不删掉一些，保留精华即可。

然后再把原来的分区抹盘，重装 Capitan，来来回回 U 盘装系统不下 5 回，周六
才确定老系统无法覆盖安装，周天又是整理旧文档、拷文档花时间，一直到晚上才
安装好，不过我也是等开始安装之后，就跑出去玩了。

记住这次教训，虽然电脑、主板、显卡都是旧货色，水果系统一定支持这些硬件，
不过还是有不少差异，所以覆盖安装未必是保险的，未必一定能起来系统，还不如
抹盘安装，更安全一些，大不了安装个旧系统一样用。

所以有了单独划分分区保留个人文档、重要 app、关键 kext 的想法，还好前些年
玩 Linux 时已经轻车熟路，虽然网上帖子大部分都说水果家有 ''''TimeMachine，那
是给有多个硬盘的同学玩的，单个硬盘的不如就多个分区好了。

我现在就是 128G 分区给主系统包括各种 Applications，50G 分区给辅助系统，
辅助系统不是 Recovery，而是能正常跑 OS X 的系统，等于是一个硬盘装两个完
整系统，不过第二个只要能起来就行，利于主盘出错时能够起来保存数据或者做修
改做测试都好，剩余的空间，就当成是 Users、Home，这样就安全多了。

由于 OS X 的系统配置与启动顺序未必像 Linux 那样，所以我就不做什么挂载了，
等系统起来后，在个人用户路径下，ln -s 必要的目录就好了。

重要的文档都在单独的盘里，这些软连接的目录都在单独分区，升级系统的时候大
不了抹盘安装，对重要数据没啥影响，重要的 app 也单独保留起来不影响抹盘，
到时拷贝过去用就行。

*** [[CategoryLinux][CategoryLinux]] / [[2015-10#p1][Permalink]] 

<!-- date: 2015-10-25T23:17:12+0800 -->

