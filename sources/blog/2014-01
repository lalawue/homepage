#title Archive for January, 2014

#p2
* 14年1月7日 周二 04:14

** 改成靠 Git''''Hub 托管了

[[https://help.github.com/categories/20/articles][GitHub Pages]] 真是个好东东，提供了静态网页的发布功能，本来是开放给开源工
程介绍页面的，不过我的主页也是完全开源的嘛，也可以借来托管了。

空间足够，git 方式更新，还可以绑定域名，对于我是完全足够了。虽然我的虚拟
主机还有近 7 个月才到期，价钱也不贵，而且之前才更新了上传脚本，这个工具
还没用爽呢，没想到才过了 2 天就完全用不上了。

因为 Git''''Hub Pages 需要以 username.github.io 来创建仓库，如果生成这些静态
网页的源码也打算放到 github 托管，就像我是把整个主页都放到了 github 上，
并使用 Emacs''''Wiki 在本地生成静态网页，如下的目录结构：

<src>
homepage +
         - publish
         - sources
</src>

那么可以考虑将 publish 作为 homepage 的一个 submodule 关联起来：

<src type="sh">
$ cd homepage
$ git submodule add git@github.com:username/username.github.io.git publish
</src>

这样 homepage 也可以单独作为 github 的工程了，publish 以及 sources 目录
可以互不干扰，大不了 homepage 下建立 .gitignore 屏蔽 publish 目录下的东
西好了。

最后域名绑定部分，看了一下 help 页面才搞定，Pages 这边是建立一个
CNAME 文件来记录 domain，另外还需要修改域名的 A 记录，次级域名的绑定还更
麻烦，我没看了。

免费使用，空间足够，自由度也高，吸引力够大的，可仔细想一下，感觉非程序员
还得学不少东西才能用起来：

 - 创建静态网页
 - 在 github 上注册并建立 Pages 仓库
 - git 的安装及日常使用
 - 绑定域名
 - 美化界面

官方推荐采用支持 markdown 语法的静态网页生成工具，比如 JekyII，我看了一
下，感觉也不简单呀，要安装 Ruby 神马的。

git 的使用如果只是发布的话，感觉了解 git push 就够了吧。

界面部分 Pages 有提供不少主题，感觉这点应该还好啊，域名部分，有自己域名
的童鞋自然懂得。

貌似到现在为止还是程序猿玩的多。

我在 04 年就使用 wiki 语法来管理主页了，也是类似于 markdown 这样的轻量级
标记语言，静态 html 页面的发布部分一点都不需要改，加上又是 git 的日常使
用者，毫无压力。

*** [[CategoryThisSite][CategoryThisSite]] / [[2014-01#p2][Permalink]] 

<!-- date: 2014-01-07T04:14:39+0800 -->



#p1
* 14年1月4日 周六 15:04

** 更方便简洁的 Upload Script

我一直使用一个上传脚本更新这个网站，这个脚本始于 2005 年五一
[[blog#2005-05#p2][Upload shell script v1.2]]，当时还使用什么 ncftpput 程序来对每一个更新过的
文件进行一次 ftp 连接传输。

然后这个脚本我居然还一直使用到了昨天，横跨 Win、Mac、Linux 系统，甚至还
在虚拟机里面用过，因为有 ncftpput 的依赖嘛，Win 下以及一些小系统上还真不
好弄。

虽然我很早就已经了解了终端下的 ftp 命令，还使用过好多次，可是我怎么就不
懂得结合起来、多动动脑筋呢。

下面做同样事情的脚本更简洁，只需要一次 ftp 连接，对于访问连接慢的大量更
新更为有利，且所需要的背景知识 05 年的我应该也已经具备了，深深地鄙视这么
多年的自己，笨死了。

贴一下核心部分就好了：

<src type="sh">
#!/bin/bash
ftp -n << "___EOF__"
open 192.168.33.88
user FTP_USER FTP_PASS_WORD
mkdir PATH_1_TO_CREATE
mkdir PATH_2/TO_CREATE
put LOCAL/PATH/FILE_1 REMOTE/PATH/FILE_1
put LOCAL/PATH/FILE_2 REMOTE/PATH/FILE_2
bye
"___EOF__"
</src>

将需要创建的目录、上传的文件替换上去就好了。目前我是生成一个临时脚本，然
后运行上传命令。

我把这个脚本扔到了这里 https://github.com/lalawue/shell_script_stuff 。

*** [[CategoryProgramming][CategoryProgramming]] / [[2014-01#p1][Permalink]]

<!-- date: 2014-01-04T15:04:51+0800 -->



#p0
* 14年1月1日 周三 02:34

** 快速关闭远程 server 的 expect 脚本

我停掉了之前的阿里云服务器，而在自己液晶屏亮不起来的破笔记本上安装了
ubuntu server，将 git server、nginx + wiki 都安装在了上面，反正 server
只是提供网络服务，不需要显示器。不过暂时每天的开关机还是需要的。

目前开机还是得按本本的电源键，不过关机倒是可以通过网络来进行，当然也就可
以使用下面的 expect 脚本了。

我是 ssh 上去关闭的，可以根据需要改成 telnet，一些适配的变量是 root 用户
ssh 上去的 prompt，shell 下 power off 的命令，一些发行版可能是 halt，不
过也得看电源模块的配置的吧，最后是 server power off 后广播出来的字符串。

按照惯例贴代码：

<src type="sh">
#!/usr/bin/expect
#
# create in 2013/12/31, by sucha in http://suchang.net
#
# Usage: halt_server host_ip

# prompt for root@host_ip
set serv_root_prompt "password"
set serv_halt_cmd "shutdown -h now"
set serv_halt_expect "halt"

set timeout 10
if { $argc != 1 } {
	send_user "$argv0 \$HOST_IP\n"
	exit
}

# get server ip
set host [lrange $argv 0 0]

# get root's passwd
stty -echo
send_user -- "Password for root@$host: "
expect_user -re "(.*)\n"
send_user "\n"
set pass $expect_out(1,string)

# login server and run halt
spawn ssh -2 root@$host
expect $serv_root_prompt
send $pass\r
send $serv_halt_cmd\r
expect $serv_halt_expect
exit
</src>

*** [[CategoryProgramming][CategoryProgramming]] / [[2014-01#p0][Permalink]] 

<!-- date: 2014-01-01T02:34:43+0800 -->



